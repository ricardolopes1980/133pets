# Generated by Selenium IDE
# 1 - Bibliotecas / Imports
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# 2 - Classes (Grupo de Definições / Métodos ou Funções)
class TestIncluirUsuario():

    # 3 - Definições / Métodos ou Funções
    # 3.1 - Configura ou Prepara

    # 3.1.1 - Método de inicialização / para ligar o Selenium WebDriver
    def setup_method(self, method):
        self.driver = webdriver.Chrome()  # instanciando o Selenium / carregando na memória
        self.vars = {}  # criando uma lista vazia

    # 3.1.2 - Método de encerramento / para desligar o Selenium WebDriver
    def teardown_method(self, method):
        self.driver.quit()  # destroi o objeto do Selenium /  descarrega da memória

    # 3.2 - Executa e 3.3 - Valida (Podem ficar intercalados)
    # 3.2.1 - Metódo Teste
    def test_incluirUsuario(self):
        self.driver.get("https://blazedemo.com/")
        self.driver.set_window_size(1382, 744)
        self.driver.find_element(By.LINK_TEXT, "home").click()
        self.driver.find_element(By.LINK_TEXT, "Register").click()
        self.driver.find_element(By.ID, "name").send_keys("Ricardo")
        self.driver.find_element(By.ID, "company").send_keys("Iterasys")
        self.driver.find_element(By.ID, "email").send_keys("ricardo")
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("ricardo.lopes1980@gmail.com")
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("ricardo.lopes1980@yopma")
        self.driver.find_element(By.ID, "email").send_keys(Keys.ENTER)
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("ricardo.lopes1980@gmail.com")
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("ricardo.lopes1980@yopmail.com")
        self.driver.find_element(By.ID, "password").send_keys("teste123")
        self.driver.find_element(By.ID, "password-confirm").send_keys("teste123")
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()

        # 3.3.1 - Validar se exibe a mensagem de Página expirada
        assert self.driver.find_element(By.CSS_SELECTOR, ".message").text == "Page Expired"

